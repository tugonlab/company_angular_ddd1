<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="../ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);
var classSet = new ClassSet();
var classes = new ClassSet().Load().Classes.OrderBy(u => u.Name);
if(classes.Count()>0)
foreach(var classModel in classes){#>
<#

	var camelCaseName = classSet.ToCamelCase(classModel.Name);
	var service = classSet.ToCamelCase(classModel.Name)+"Service";
	var controller = classSet.ToCamelCase(classModel.Name)+"Controller";
	var spacedName = classSet.ToSpacedName(classModel.Name);
	var underscoreName = classSet.ToUnderscore(classModel.Name).ToUpper();
	var parents = classModel.Fields.Where(x=>x.IsParent);
	var classChild = classModel.Fields.Where(x=>x.IsCollection);

	//manager.IsAutoIndentEnabled=true;
	manager.CanOverrideExistingFile = true;

	System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\Web\\ClientApp\\app\\admin\\_generated\\"+classModel.Name+"\\");	
	
	manager.StartNewFile("ClientApp/app/admin/_generated/"+classModel.Name+"/Edit.html","web","");
#>

					<div class="row">
<# 
if(classModel.Fields.Count()>0)
foreach(var field in classModel.Fields.OrderByDescending(x=>x.DataType)){#>
<# if((field.Name != "Id" && !field.Name.EndsWith("Id") ) && !field.IsCollection) {#>			
<#switch(field.HtmlType ){
	case "checkbox":
#>
						<div class=" form-group col-md-6">
							<label>
								<input type="checkbox" [(ngModel)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" name="<#=classSet.ToCamelCase(field.Name)#>Id" />
								{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}
							</label>
						</div>
<#
	break;
	case "select":
#>
						<div class=" form-group col-md-6">
							<label class="control-label">{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}<#if(field.IsParent){#> <i class="fa fa-file-o"></i><#}#></label>
							<combo-<#=classSet.ToDash(field.DataType)#> value-field="id" cssClass="form-control" load-on-start="false" [(model)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>Id" name="<#=classSet.ToCamelCase(field.Name)#>Id"></combo-<#=classSet.ToDash(field.DataType)#> >
						</div>
<#
	break;
	case "file":
#>
						<div class=" form-group col-md-6">
							<label class="control-label">{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}</label>
							<input type="file" class="form-control"  name="<#=classSet.ToCamelCase(field.Name)#>" id="<#=classSet.ToCamelCase(field.Name)#>" />
							<input type="hidden" [(ngModel)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" name="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" />
						</div>
<#
	break;
	case "textarea":
#>
						<div class=" form-group col-md-12">
							<label class="control-label">{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}</label>
							<textarea class="form-control" rows=5 [(ngModel)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" name="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>"></textarea>
						</div>
<#
	break;
	case "password":
#>
						<div class=" form-group col-md-6">
							<label class="control-label">{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}</label>
							<input type="password" class="form-control" [(ngModel)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" name="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" />
						</div>
<#
	break;
	default:
#>
						<div class=" form-group col-md-6">
							<label class="control-label">{{'<#=underscoreName#>.FORM.LABEL.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}</label>
							<input type="<#=field.HtmlType #>" class="form-control" [(ngModel)]="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" name="<#=camelCaseName#>.<#=classSet.ToCamelCase(field.Name)#>" autofocus />
						</div>
<#
	break;
}}}#>
					</div>


<#
manager.EndBlock();
#>
<#
///////////////////////////////////////////////////////
//Edit
///////////////////////////////////////////////////////
manager.StartNewFile("ClientApp/app/admin/_generated/"+classModel.Name+"/Edit.ts","web","");
#>
import { Component, NgModule, Input, OnInit, Output, EventEmitter} from '@angular/core';
import { ReactiveFormsModule, FormsModule } from "@angular/forms";
import { <#=classModel.Name#>Service } from '../../../services/generated/<#=classModel.Name#>Service';
import { <#=classModel.Name#> } from '../../../models/<#=classModel.Name#>';
import { TranslateService } from 'ng2-translate';

@Component({    
	selector:'form-<#=classSet.ToUnderscore(classModel.Name)#>',
    templateUrl: './Edit.html',
    providers: [<#=classModel.Name#>Service]
})
export class <#=classModel.Name#>Edit implements OnInit {

    constructor(private _service: <#=classModel.Name#>Service, public translate: TranslateService) {
		
    }
	@Input() obj?:any;
	@Input() modal?:any;

	@Output() onSave?:EventEmitter<<#=classModel.Name#>> = new EventEmitter();

	@Input()
    <#=camelCaseName#>: <#=classModel.Name#>;

    ngOnInit() {
        this.<#=camelCaseName#> = this.<#=camelCaseName#> || new <#=classModel.Name#>();
    }

	public save(<#=camelCaseName#>) {
		this.onSave.emit(<#=camelCaseName#>);
    }

	public closeEdit(){
		this.modal.hide();
	}

}
<#
manager.EndBlock();

}
 manager.Process(false); #>

