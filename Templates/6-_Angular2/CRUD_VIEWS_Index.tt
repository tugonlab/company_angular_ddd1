<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="../ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);
var classSet = new ClassSet();
var classes = new ClassSet().Load(true).Classes.OrderBy(u => u.Name);
var projectName = "web";
if(classes!=null && classes.Count()>0)
foreach(var classModel in classes){

	var camelCaseName = classSet.ToCamelCase(classModel.Name);
	var service = classSet.ToCamelCase(classModel.Name)+"Service";
	var controller = classSet.ToCamelCase(classModel.Name)+"Controller";
	var spacedName = classSet.ToSpacedName(classModel.Name);
	var underscoreName = classSet.ToUnderscore(classModel.Name).ToUpper();
	var fieldParents = classModel.Fields.Where(x=>x.IsParent);
	var fieldChildren = classModel.Fields.Where(x=>x.IsCollection);
	var fileFields = classModel.FileFields();
	manager.CanOverrideExistingFile=true;


	var prop="nome";
	if(classModel.Fields.Any(x=>x.Name =="Nome")){
		prop = "nome";
	}else if(classModel.Fields.Any(x=>x.Name =="UserName")){    
		prop ="userName";	
	}else if(classModel.Fields.Any(x=>x.Name =="Name")){    
		prop ="name";
	}else if(classModel.Fields.Any(x=>x.Name.Contains("Nome"))){
		prop = classModel.Fields.Where(x=>x.Name.Contains("Nome")).FirstOrDefault().Name;
		prop = classSet.ToCamelCase(prop);
	}else if(classModel.Fields.Any(x=>x.Name.Contains("Name"))){
		prop = classModel.Fields.Where(x=>x.Name.Contains("Name")).FirstOrDefault().Name;
		prop = classSet.ToCamelCase(prop);
	}else if(classModel.Fields.Any(x=>x.Name =="ClientName")){    
		prop ="clientName";
	}else if(classModel.Fields.Any(x=>x.Name =="DisplayName")){    
		prop ="displayName";
	}else if(classModel.Fields.Any(x=>x.Name =="Description")){    
		prop ="description";
	}else if(classModel.Fields.Any(x=>x.DataType =="String")){
		prop = classModel.Fields.Where(x=>x.DataType=="String").FirstOrDefault().Name;
		prop = classSet.ToCamelCase(prop);
	}else if(classModel.Fields.Any(x=>x.Name.Contains("Description"))){
		prop = classModel.Fields.Where(x=>x.Name.Contains("Description")).FirstOrDefault().Name;
		prop = classSet.ToCamelCase(prop);
	}else{
		prop="id";
	}

	System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\"+projectName+"\\ClientApp\\app\\admin\\_generated\\"+classModel.Name+"\\");
			manager.StartNewFile("ClientApp/app/admin/_generated/"+classModel.Name+"/Index.html",projectName,"");
	//manager.StartNewFile("Host/Views/"+classModel.Name+"/Index.html","web","");
#>
<h4  class="page-title">{{'<#=underscoreName#>.TITLE' | translate }}</h4>   
                
                   
                
            <div class="block-area">
				<a class="button-icon"  tooltip-placement="right" (click)="openEdit()" style="cursor:pointer" ><i class="fa fa-file fa-2x"></i></a><br/><br/>
                <table class="table table-bordered table-hover tile">
                    <tr>
<# if(classModel.Fields!=null && classModel.Fields.Count()>0)
foreach(var field in classModel.Fields){#>
<# if(!field.IsClass  && field.Name.ToLower() == prop.ToLower()) {#>
                        <th>
                            {{'<#=underscoreName#>.GRID.COLUMN.<#= classSet.ToUnderscore(field.Name).ToUpper() #>' | translate }}
                        </th>   
<#}}#>
						<th>{{'<#=underscoreName#>.GRID.COLUMN.ACTIONS' | translate }}</th>                      
                    </tr>
                    <tr *ngFor="let <#=classSet.ToCamelCase(classModel.Name)#> of <#=classSet.ToCamelCase(classModel.Name)#>List; let index=index">
<# 
if(classModel.Fields!=null && classModel.Fields.Count()>0)
foreach(var field in classModel.Fields){#>
<# if(!field.IsClass && field.Name.ToLower() == prop.ToLower()) {#>
                        <td>
<#if(field.DataType.ToString().ToLower().Contains("bool") ){#>
							<i *ngIf="<#=classSet.ToCamelCase(classModel.Name)#>.<#=classSet.ToCamelCase(field.Name)#>" class="fa fa-check"></i>
							<i *ngIf="!<#=classSet.ToCamelCase(classModel.Name)#>.<#=classSet.ToCamelCase(field.Name)#>" class="fa fa-ban"></i>
<#}else if(field.Name.ToLower()=="password" || field.Name.ToLower()=="pass" || field.Name.ToLower()=="senha"){#>
                            *****
<#}else{#>
                            {{<#=classSet.ToCamelCase(classModel.Name)#>.<#=classSet.ToCamelCase(field.Name)#>}}
<#}#>
                        </td>
<#}}#>
                        <td>
                            <div class="panel-ctrls">
                                <a style="cursor:pointer" class="button-icon" style="color:green;cursor:pointer"  (click)="openEdit(<#=classSet.ToCamelCase(classModel.Name)#>)">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                <a style="cursor:pointer" class="button-icon" style="color:red;cursor:pointer" (click)="remove(<#=classSet.ToCamelCase(classModel.Name)#>,index)">
                                    <i class="fa fa-trash-o danger"></i>
                                </a>
                            </div>
                        </td>
                    </tr>


                </table>
				<!--<pre>{{page|json}}</pre>-->
				<ngb-pagination *ngIf="page.totalCount > page.size" [pageSize]="page.size" [boundaryLinks]="true" [maxSize]="page.maxSize" [collectionSize]="page.totalCount" [(page)]="page.number" class="pagination-sm" (pageChange)="pageChanged($event)" [rotate]="false"   previousText="&lsaquo;" nextText="&rsaquo;" firstText="&laquo;" lastText="&raquo;"></ngb-pagination>
</div>

<toaster-container></toaster-container>

<!--modal edit -->
<ng-template #<#=camelCaseName#>Modal let-c="close" let-d="dismiss">
<#

#>
<# if(fieldChildren.Count()>0){#>
				<div class="modal-header">
				<h4 class="modal-title">{{'<#=underscoreName#>.TITLE' | translate }}</h4>
					<button type="button" class="close" (click)="hideModal()">×</button>
					
				</div>
				<div class="modal-body">
						<ngb-tabset>
							<ngb-tab>
								<ng-template ngbTabTitle><#=classModel.Name#></ng-template>
								<ng-template ngbTabContent>
								<form-<#=classSet.ToUnderscore(classModel.Name)#> [modal]="<#=camelCaseName#>Modal" [(<#=camelCaseName#>)]="<#=camelCaseName#>" [obj]="this" (onSave)="save(<#=camelCaseName#>,this)" ></form-<#=classSet.ToUnderscore(classModel.Name)#>>
								</ng-template>
							</ngb-tab>
<#foreach(var field in fieldChildren){#>
							<ngb-tab>
								<ng-template ngbTabTitle><#=classSet.ToSpacedName(field.Name)#></ng-template>
								<ng-template #<#=classSet.ToCamelCase(field.DataType)#>List ngbTabContent>
								<list-<#=classSet.ToUnderscore(field.DataType)#> #<#=classSet.ToCamelCase(field.DataType)#>ChildList [autoLoad]="false" [<#=classSet.ToCamelCase(classModel.Name)#>Id]="<#=classSet.ToCamelCase(classModel.Name)#>.id" ></list-<#=classSet.ToUnderscore(field.DataType)#>>								
								</ng-template>
							</ngb-tab>
<#}#>
						</ngb-tabset>
						</div>
						<div class="modal-footer">
							<button type="button" (click)="save(<#=camelCaseName#>)" class="btn btn-success">{{'<#=underscoreName#>.FORM.BUTTON.SAVE' | translate }}</button>
							<button type="button" (click)="hideModal()" class="btn btn-default">{{'<#=underscoreName#>.FORM.BUTTON.CANCEL' | translate }}</button>
						</div>
<#}else{#>
	<div class="modal-header">
		<h4 class="modal-title">{{'<#=underscoreName#>.TITLE' | translate }}</h4>
		<button type="button" class="close" (click)="hideModal()">×</button>		
	</div>
	<div class="modal-body">
		<form-<#=classSet.ToUnderscore(classModel.Name)#> [modal]="<#=camelCaseName#>Modal" [(<#=camelCaseName#>)]="<#=camelCaseName#>" [obj]="this" (onSave)="save(<#=camelCaseName#>,this)" ></form-<#=classSet.ToUnderscore(classModel.Name)#>>
	</div>
	<div class="modal-footer">
		<button type="button" (click)="save(<#=camelCaseName#>)" class="btn btn-success">{{'<#=underscoreName#>.FORM.BUTTON.SAVE' | translate }}</button>
		<button type="button" (click)="hideModal()" class="btn btn-default">{{'<#=underscoreName#>.FORM.BUTTON.CANCEL' | translate }}</button>
	</div>

<#}#>
</ng-template>
<#
manager.EndBlock();
#>
<#
///////////////////////////////////////////////////////
//Index
///////////////////////////////////////////////////////
manager.StartNewFile("ClientApp/app/admin/_generated/"+classModel.Name+"/Index.ts","web","");

#>
import { Component, NgModule, Input, Output, OnInit, ViewChild, EventEmitter, TemplateRef, OnChanges, SimpleChanges } from '@angular/core';
import { ReactiveFormsModule, FormsModule } from "@angular/forms";
import { <#=classModel.Name#>Service } from '../../../services/generated/<#=classModel.Name#>Service';
import { <#=classModel.Name#> } from '../../../models/<#=classModel.Name#>';
import { <#=classModel.Name#>Edit } from './Edit';
import { PagingModel } from '../../../models/PagingModel';
import { NgbModal, ModalDismissReasons, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
import { TranslateService } from 'ng2-translate';
import { ToasterService } from 'angular2-toaster';

///child
<# foreach(var child in fieldChildren){#>
import { <#=child.DataType #> } from '../../../models/<#=child.DataType #>';
import { <#=child.DataType #>Index } from '../<#=child.DataType #>/Index';
<#}#>

declare var $:any;

@Component({
    
	selector: 'list-<#=classSet.ToUnderscore(classModel.Name)#>',
    templateUrl: './Index.html',
    providers: [
		<#=classModel.Name#>Service
	]
})
export class <#=classModel.Name#>Index implements OnInit, OnChanges {

	page: PagingModel<<#=classModel.Name#>>;
	errorMessage: string;
    <#=camelCaseName#>: <#=classModel.Name#>;
	<#=camelCaseName#>List: <#=classModel.Name#>[];
<# foreach(var field in  fieldChildren){#>
	<#=classSet.ToCamelCase(field.DataType)#>: <#=field.DataType#>;
<#}#>
	@Input()
	autoLoad=true;
<# foreach(var field in fieldParents){#>
	//@Input() <#=classSet.ToCamelCase(field.Name)#>: <#= field.Name#>;
	@Input() <#=classSet.ToCamelCase(field.Name)#>Id: any;
<#}#>
	@ViewChild('<#=camelCaseName#>Modal') 
	public <#=camelCaseName#>Modal:TemplateRef<any>;
	private modalRef: NgbModalRef;
<# foreach(var field in  fieldChildren){#>
	@ViewChild('<#=classSet.ToCamelCase(field.DataType)#>ChildList') private _<#=classSet.ToCamelCase(field.DataType)#>ChildList: <#=field.DataType#>Index;
	@ViewChild('<#=classSet.ToCamelCase(field.DataType)#>List') private _<#=classSet.ToCamelCase(field.DataType)#>List: TemplateRef<any>;
<#}#>
	
	constructor( private _service: <#=classModel.Name#>Service, public translate: TranslateService, private _modalService: NgbModal, private _toasterService: ToasterService	) {
		this.page = _service.page;
		this.<#=camelCaseName#> = new <#=classModel.Name#>();
<# foreach(var field in  fieldChildren){#>
		this.<#=classSet.ToCamelCase(field.DataType)#> = new <#=field.DataType#>();
<#}#>
    }

	ngOnInit() {
		this.load();
	}

	ngOnChanges(changes: SimpleChanges) {
        console.log(changes)
<# foreach(var fieldParent in fieldParents){#>
        if (changes['<#=classSet.ToCamelCase(fieldParent.DataType)#>Id']) {
            this.getBy<#=fieldParent.Name#>IdPage(this.<#=classSet.ToCamelCase(fieldParent.DataType)#>Id);
        }
<#}#>
    }

	hideModal(){
		this.modalRef.close();
	}

	private openModal(modal){		
		this.modalRef = this._modalService.open(modal);
	}

	pageChanged(event) {
		this.autoLoad = true;
		this.load();
	}

    load() {
		if(!this.autoLoad)
			return;

<# 
if(fieldParents.Count()>0){
var i=0;
foreach(var fieldParent in fieldParents){
	if(i==0){
#>
		if(this.<#=classSet.ToCamelCase(fieldParent.DataType)#>Id){
<#}else{#>
		} else if (this.<#=classSet.ToCamelCase(fieldParent.DataType)#>Id){
<#}#>
			this.getBy<#=fieldParent.Name#>IdPage(this.<#=classSet.ToCamelCase(fieldParent.DataType)#>Id);
<#
	i++;
}
#>
		} else {
			this.getAll();
		}
<#}else{#>
		this.getAll();
<#}#>
    }



	public save(<#=camelCaseName#>, modal) {
		var $this = this;

        this._service.save(<#=camelCaseName#>, $("input[type=file]")).subscribe(
			result => {
<#if(classModel.Fields.Any(x=>x.Name=="Id")){#>
				this.<#=camelCaseName#> = result;
				if(!this.<#=camelCaseName#>List)
					this.<#=camelCaseName#>List = [];
				if(!<#=camelCaseName#>.id)
					this.<#=camelCaseName#>List.push(result);
				else {
                    var f = this.<#=camelCaseName#>List.filter(x => x.id == result.id);
					if(f)
						f[0] = result;
                }
<#}#>
				this.modalRef.close();
			},
			error => {
				this.errorMessage = error;
				this._toasterService.pop('error', 'Error', 'Error while saving');
				console.log(error)
			}
		);
    }

<# foreach(var fieldParent in fieldParents){#>
	public getBy<#=fieldParent.Name#>Id(id) {
		this._service.getBy<#=fieldParent.Name#>Id(id)
		.subscribe(
			result => {
				this.<#=camelCaseName#>List = result;
			},
			error => {
				this.errorMessage = error;
			}
		);
    }

	public getBy<#=fieldParent.Name#>IdPage(id) {
		this._service.getBy<#=fieldParent.Name#>IdPage(id, this.page)
		.subscribe(
			result => {
				this.<#=camelCaseName#>List = result.list;
				this.page.totalCount = result.totalCount;
			},
			error => {
				this.errorMessage = error;
			}
		);
    }
<#}#>

    public getAll() {
		this._service.getPage(this.page)
		.subscribe(
			result => {
				this.page.totalCount = result.totalCount; 
				this.<#=camelCaseName#>List = result.list;
			},
			error => {
				this.errorMessage = error;
			}
		);
    }

	public openEdit(entity?: <#=classModel.Name#>, modal?:any ){
<#if(fieldParents.Count()>0){#>
		if(entity){
			this.<#=camelCaseName#> = entity || new <#=classModel.Name#>();

		}else{
			this.<#=camelCaseName#> = <<#=classModel.Name#>>{
<# foreach(var parent in  fieldParents){#>
				<#=classSet.ToCamelCase(parent.DataType)#>Id: this.<#=classSet.ToCamelCase(parent.DataType)#>Id,
<#}#>
			};
		}

<#}else{#>
		this.<#=camelCaseName#> = entity || new <#=classModel.Name#>();
<#}#>
		//this._service.emit("onOpenEdit",entity);
		if(entity){
<# foreach(var child in  fieldChildren){#>
			//this._<#=classSet.ToCamelCase(child.DataType)#>ChildList.getBy<#=classModel.Name#>IdPage(entity.id);
<#}#>
		}
		this.openModal(this.<#=camelCaseName#>Modal);
	}


	public remove(<#=camelCaseName#>:<#=classModel.Name#>, index:number) {
		var msg = this.translate.instant('<#=underscoreName#>.GRID.CONFIRM_DELETE');
		if(confirm(msg)){
			this._service.remove(<#=camelCaseName#>).subscribe(
				result => {
					//this.<#=camelCaseName#> = result;
					this.<#=camelCaseName#>List.splice(index,1)
				},
				error => {
					this.errorMessage = error;
				}
			);
		}
    }
}
<#
manager.EndBlock();
#>
<#
}
manager.Process(false);
#>
