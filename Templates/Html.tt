<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="ClassModel.ttinclude" #>
<#@ output extension=".txt"  #>
<#
var classSet = new ClassSet();
var classes = new ClassSet().Load().Classes.OrderBy(u => u.Name); 
#>
<#

foreach(var classModel in classes){
		var camelCaseName = classSet.ToCamelCase(classModel.Name);
		var spacedName = classSet.ToSpacedName(classModel.Name);
		var classUnderscore = classSet.ToUnderscore(classModel.Name).ToUpper();#>

//////////////////////////////////////////////////////////
/// STRING BUILDER HTML FOR  <#=spacedName#>
//////////////////////////////////////////////////////////
<#
	foreach(var field in classModel.Fields){
	if(!field.IsClass && false){
#>
sb.AppendFormat("<b>{0}</b>:{1}<br />","<#=classSet.ToSpacedName(field.Name).ToUpper()#>", <#=field.Name#>.To<<#=field.DataType#>>());
<#
}}}
#>


<#

foreach(var classModel in classes){
		var camelCaseName = classSet.ToCamelCase(classModel.Name);
		var spacedName = classSet.ToSpacedName(classModel.Name);
		var classUnderscore = classSet.ToUnderscore(classModel.Name).ToUpper();#>

//////////////////////////////////////////////////////////
/// STRING BUILDER HTML FOR  <#=spacedName#>
//////////////////////////////////////////////////////////
<#
	foreach(var field in classModel.Fields){
	if(!field.IsClass){
#>
sb.AppendFormat("<b>{0}</b>:{1}<br />","<#=classSet.ToSpacedName(field.Name).ToUpper()#>", <#=field.Name#>.To<string>());
<#
}}}
#>


<#

foreach(var classModel in classes){
		var camelCaseName = classSet.ToCamelCase(classModel.Name);
		var spacedName = classSet.ToSpacedName(classModel.Name);
		var classUnderscore = classSet.ToUnderscore(classModel.Name).ToUpper();#>

//////////////////////////////////////////////////////////
/// UPDATE CHECK  <#=spacedName#>
//////////////////////////////////////////////////////////
<#
	foreach(var field in classModel.Fields){
	if(!field.IsClass){
#>
if(currentEntity.<#=field.Name#>!=newEntity.<#=field.Name#>)
	currentEntity.<#=field.Name#> = newEntity.<#=field.Name#>;

<#
}}}
#>
