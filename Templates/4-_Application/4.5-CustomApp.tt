<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="../ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);
manager.CanOverrideExistingFile=false;
var classSet = new ClassSet();
var classesAll = classSet.Load().Classes;
var classes = classesAll.Where(x=> x.Name!=""  ).OrderBy(u => u.Name);

foreach(var classModel in classes){#>
<#
var camelCaseName = classSet.ToCamelCase(classModel.Name);
System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\Application\\Services\\");	
manager.StartNewFile("Services\\"+classModel.Name+ "AppService.cs","Application","",null);
#>
using Application.Interfaces;
using Domain.Entities;
using Domain.Interfaces;
using Domain.Services.Interfaces;
using System.Linq;

namespace Application.Services
{
    public partial class <#=classModel.Name#>AppService
    {
		/*
        public <#=classModel.Name#>AppService(I<#=classModel.Name#>Service service, IUnitOfWork uow)
		:base(service, uow)
        {
			_uow = uow;
            _service = service;
        }
		*/

	}
        
}
<#
manager.EndBlock();
#>
<#
System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\Application\\Interfaces\\");	
manager.StartNewFile("Interfaces\\I"+classModel.Name+ "AppService.cs","Application","",null);
#>

namespace Application.Interfaces
{
    public partial interface I<#=classModel.Name#>AppService 
    {

    }
}

<#
manager.EndBlock();
}
manager.Process(false);
#>
