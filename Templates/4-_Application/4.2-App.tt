<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="../ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);
var classSet = new ClassSet();
var classesAll = classSet.Load().Classes;
var classes = classesAll.Where(x=> x.Name!=""  ).OrderBy(u => u.Name);

foreach(var classModel in classes){#>
<#
var camelCaseName = classSet.ToCamelCase(classModel.Name);
System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\Application\\Services\\_generated\\");	
manager.StartNewFile("Services\\_generated\\"+classModel.Name+ "AppService.cs","Application","",null);
#>
using Application.Interfaces;
using Application.ViewModels;
using Domain.Entities;
using Domain.Interfaces;
using Domain.Services.Interfaces;

namespace Application.Services
{
    public partial class <#=classModel.Name#>AppService : BaseAppService<<#=classModel.Name#>,<#=classModel.Name#>ViewModel>, I<#=classModel.Name#>AppService
    {

        public <#=classModel.Name#>AppService(I<#=classModel.Name#>Service service, IUnitOfWork uow)
		:base(service, uow)
        {
			_uow = uow;
            _service = service;
        }

		public <#=classModel.Name#> Save(<#=classModel.Name#> model)
        {
            var result = model.Id > 0 ? _service.Update(model) : _service.Add(model);
            _uow.Commit();
            return result;
        }
	}
        
}
<#
manager.EndBlock();
}

manager.Process(true);
#>
