<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\main.ttinclude" #>
<#@ include file="..\ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);   
var classSet = new ClassSet();
var classes = new ClassSet().Load(true).Classes.OrderBy(u => u.Name).ToList(); 

System.IO.Directory.CreateDirectory(GetCurrentDirectory()+"..\\..\\..\\Data\\EF\\Mappings\\_generated");	

foreach(var classModel in classes){#>
<#
		manager.StartNewFile("EF\\Mappings\\_generated\\"+classModel.Name+ "Map.cs","Data",""); 
#>
using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Data.EF.Mappings
{
    public class <#=classModel.Name#>Map: EntityTypeConfiguration<<#=classModel.Name#>>
    {
        public override void Map(EntityTypeBuilder<<#=classModel.Name#>> builder)
        {
<#if(!classModel.IsSubClass) {#>
            builder.HasKey(x => x.Id);
<#}#>
<# foreach(var field in classModel.Fields){#>
<# if(!field.IsClass){#>
<#if(!field.IsNotMapped) {#>
<#if(field.DataType.Contains("Guid") && field.Name=="Id"){#>
            builder.Property(t => t.<#= field.Name #>).HasColumnName("<#= classSet.ToUnderscore(field.Name).ToUpper() #>").ValueGeneratedOnAdd();
<#}else{#>
            builder.Property(t => t.<#= field.Name #>).HasColumnName("<#= classSet.ToUnderscore(field.Name).ToUpper() #>");
<#}#>
<#}else{#>
			builder.Ignore(i => i.<#= field.Name #>);
<#}}}#>
			builder.ToTable("TB_<#=classSet.ToUnderscore(classModel.Name).ToUpper() #>");   
        }
    }
}

<#
manager.EndBlock();
}
manager.Process(false);
#>
